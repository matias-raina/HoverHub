---
title: HoverHub - Diagrama de Clases
---
classDiagram
direction TB

%% ===== ENUMS =====
class UserRole {
  <<enumeration>>
  + CONTRACTOR
  + PILOT
  + ADMIN
}

class AccountStatus {
  <<enumeration>>
  + ACTIVE
  + SUSPENDED
  + INACTIVE
}

class OfferStatus {
  <<enumeration>>
  + ACTIVE
  + PAUSED
  + FINISHED
}

class ApplicationStatus {
  <<enumeration>>
  + PENDING
  + ACCEPTED
  + REJECTED
  + WITHDRAWN
}

class NotificationType {
  <<enumeration>>
  + MESSAGE
  + ALERT
  + REMINDER
}

%% ===== CORE USER DOMAIN =====
class User {
  <<interface>>
  + id: int
  + name: str
  + email: str
  - password_hash: str
  + login()
  + logout()
}

class Account {
  + id: int
  + role: UserRole
  + user: User
  # status: AccountStatus
}

class ContractorAccount {
  + payment_info: str
  + post_job()
  + review_operator()
}

class PilotAccount {
  + drone_license: str
  + portfolio: List[WorkExample]
  + verify_license()
  + add_portfolio_item(item: WorkExample)
}

class AdminAccount {
  + ban_user(user: User)
  + review_reports()
}

User --> "*" Account
Account <|-- ContractorAccount
Account <|-- PilotAccount
Account <|-- AdminAccount

%% ===== SERVICE / OFFER DOMAIN =====
class ServiceOffer {
  + id: int
  + title: str
  + description: str
  + category: str
  + location: Location
  # status: OfferStatus
  + activate()
  + pause()
  + finish()
}

ContractorAccount --> "*" ServiceOffer : posts >

%% ===== APPLICATION DOMAIN =====
class Application {
  + id: int
  + offer: ServiceOffer
  + applicant: PilotAccount
  # status: ApplicationStatus
  + submit()
  + withdraw()
  + update_status(new_status: ApplicationStatus)
}

Application --> PilotAccount
Application --> ServiceOffer

%% ===== NOTIFICATIONS =====
class Notification {
  + id: int
  + type: NotificationType
  + sender: User
  + receiver: User
  + message: str
  + mark_as_read()
}

Notification --> User : sender/receiver

%% ===== CONTROLLERS / DECORATORS =====
class Controller {
  <<interface>>
  + handle_request(request)
}

class UserController {
  + get_profile(user_id)
  + update_profile(user_id, data)
  + change_password(user_id, current, new)
}

class OfferController {
  + create_offer(data)
  + get_offers()
  + update_offer(id, data)
}

class ApplicationController {
  + apply_to_offer(offer_id, operator_id)
  + withdraw_application(id)
}

class NotificationController {
  + send_notification(sender, receiver, message)
  + get_notifications(user_id)
}

class AuthController {
  + login(email, password)
  + register(user_data, role)
  + logout(token)
}

Controller <|.. UserController
Controller <|.. OfferController
Controller <|.. ApplicationController
Controller <|.. NotificationController
Controller <|.. AuthController

class AuthDecorator {
  - controller: Controller
  + handle_request(request)
}

AuthDecorator --> Controller

%% ===== FACTORY =====
class UserFactory {
  + create_account(role: UserRole, user: User, data: dict) : Account
}

UserFactory --> UserRole
UserFactory --> Account
UserFactory --> User

%% ===== UTIL / SUPPORT CLASSES =====
class Location {
  + latitude: float
  + longitude: float
  + city: str
  + country: str
}

class WorkExample {
  + title: str
  + description: str
  + date: datetime
  + media_url: str
}

PilotAccount --> WorkExample
ServiceOffer --> Location

%% ===== RELATIONS =====
User --> Notification : receives
PilotAccount --> Application : submits
Application --> Notification : triggers
